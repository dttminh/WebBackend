
package com.roojai.radar.stub;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;


/**
 * This class was generated by Apache CXF 3.1.8 2016-11-07T15:46:03.510+07:00
 * Generated source version: 3.1.8
 * 
 */
public final class DpoService_DefaultDpoServiceEndpoint2_Client {

	private static final QName SERVICE_NAME = new QName("http://towerswatson.com/rto/dpo/services/2010/01","DpoService");

	private DpoService_DefaultDpoServiceEndpoint2_Client() {
	}

	public static void main(String args[]) throws java.lang.Exception {
		/*URL wsdlURL = DpoService_Service.WSDL_LOCATION;
		if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
			File wsdlFile = new File(args[0]);
			try {
				if (wsdlFile.exists()) {
					wsdlURL = wsdlFile.toURI().toURL();
				} else {
					wsdlURL = new URL(args[0]);
				}
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}*/

		DpoService_Service ss = new DpoService_Service();
		DpoService port = ss.getDefaultDpoServiceEndpoint2();

		System.out.println("Invoking getPof...");
		com.roojai.radar.stub.PofRequest pofRequest = null;
		try {
			pofRequest = new PofRequest();
			ObjectFactory factory = new ObjectFactory();
			
			JAXBElement<PofrInformationCollectionDataContract> jaxbPofrCollectionData = factory.createPofRequestPofrCollection(new PofrInformationCollectionDataContract());
			PofrInformationCollectionDataContract pofrInformationDataContract = jaxbPofrCollectionData.getValue();
			
			PofrInformationDataContract pofr = new PofrInformationDataContract();
			String txt = readFile("C:/workspace/roojai/src/main/groovy/com/roojai/radar/input.xml",Charset.forName("utf-16"));
			pofr.setPofr(txt);
			pofrInformationDataContract.getPofrInformationDataContract().add(pofr);
			pofRequest.setPofrCollection(jaxbPofrCollectionData);
			
			// date
			/*GregorianCalendar c = new GregorianCalendar();
			c.setTime(new Date());
			XMLGregorianCalendar date = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
			pofRequest.setTime(date);*/
			
			com.roojai.radar.stub.PofResponse result = port.getPof(pofRequest);
			//PofInformationDataContract o = _getPof__return.getPofCollection().getValue().getPofInformationDataContract().
			
			//System.out.println("getPof.result=" + result);
			System.out.println(result.getPofCollection().getValue().getPofInformationDataContract().get(0).getPof().getValue());
			System.out.println("eror"+result.getErrorMessage().getValue());

		} catch (DpoServiceGetPofConfigurationFaultContractFaultFaultMessage e) {
			System.out.println(
					"Expected exception: DpoService_GetPof_ConfigurationFaultContractFault_FaultMessage has occurred.");
			System.out.println(e.toString());
		} catch (DpoServiceGetPofSevereFaultContractFaultFaultMessage e) {
			System.out.println(
					"Expected exception: DpoService_GetPof_SevereFaultContractFault_FaultMessage has occurred.");
			System.out.println(e.toString());
		}
		
		/*System.out.println("Invoking getPofWithId...");
		com.roojai.radar.PofRequestUsingMasterSet _getPofWithId_parameters = null;
		try {
			com.roojai.radar.PofResponse2 _getPofWithId__return = port.getPofWithId(_getPofWithId_parameters);
			System.out.println("getPofWithId.result=" + _getPofWithId__return);

		} catch (DpoServiceGetPofWithIdConfigurationFaultContractFaultFaultMessage e) {
			System.out.println(
					"Expected exception: DpoService_GetPofWithId_ConfigurationFaultContractFault_FaultMessage has occurred.");
			System.out.println(e.toString());
		} catch (DpoServiceGetPofWithIdSevereFaultContractFaultFaultMessage e) {
			System.out.println(
					"Expected exception: DpoService_GetPofWithId_SevereFaultContractFault_FaultMessage has occurred.");
			System.out.println(e.toString());
		}*/

		System.exit(0);
	}
	static String readFile(String path, Charset encoding) throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(path));
		return new String(encoded, encoding);
	}
}
